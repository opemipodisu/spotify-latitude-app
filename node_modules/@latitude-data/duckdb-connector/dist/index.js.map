{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import path from 'path'\nimport {\n  BaseConnector,\n  CompiledQuery,\n  ConnectorError,\n  ConnectorOptions,\n  Source,\n  ResolvedParam,\n  type BuildSupportedMethodsArgs,\n} from '@latitude-data/source-manager'\nimport {\n  emptyMetadata,\n  type SupportedMethod,\n} from '@latitude-data/sql-compiler'\nimport QueryResult, { DataType, Field } from '@latitude-data/query_result'\nimport { Database, OPEN_READONLY, OPEN_READWRITE } from 'duckdb-async'\n\nexport type ConnectionParams = {\n  url?: string\n}\n\nexport default class DuckdbConnector extends BaseConnector<ConnectionParams> {\n  private client?: Database\n  private url: string\n\n  constructor(options: ConnectorOptions<ConnectionParams>) {\n    super(options)\n    this.url = options.connectionParams.url || ':memory:'\n  }\n\n  end(): Promise<void> {\n    if (this.client) return this.client.close()\n    return Promise.resolve()\n  }\n\n  resolve(value: unknown): ResolvedParam {\n    return {\n      value,\n      resolvedAs: '?',\n    }\n  }\n\n  protected buildSupportedMethods(\n    buildArgs: BuildSupportedMethodsArgs,\n  ): Record<string, SupportedMethod> {\n    const supportedMethods = super.buildSupportedMethods(buildArgs)\n    const { context } = buildArgs\n\n    return {\n      ...supportedMethods,\n      materialized: {\n        requirements: {\n          interpolationPolicy: 'require',\n          interpolationMethod: 'raw',\n          requireStaticArguments: true,\n        },\n        resolve: async (referencedQuery: string) => {\n          if (typeof referencedQuery !== 'string') {\n            throw new Error('Invalid query name')\n          }\n          const fullSubQueryPath = referencedQuery.startsWith('/')\n            ? referencedQuery\n            : path.join(\n                path.dirname(context.request.queryPath),\n                referencedQuery,\n              )\n\n          if (\n            context.queriesBeingCompiled.includes(\n              fullSubQueryPath.replace(/.sql$/, ''),\n            )\n          ) {\n            throw new Error(\n              'Query reference to a parent, resulting in cyclic references.',\n            )\n          }\n\n          const refSource = (await this.source.manager.loadFromQuery(\n            fullSubQueryPath,\n          )) as Source\n          const { config, methods, sqlHash } =\n            await refSource.getMetadataFromQuery(fullSubQueryPath)\n          if (!config.materialize) {\n            throw new Error(\n              `Referenced query is not a materialized. \\nYou can materialize it by adding {@config materialized_query = true} in the query content.`,\n            )\n          }\n\n          const unsupportedMethods = ['param', 'runQuery']\n          const unsupportedMethodsInQuery = Array.from(methods).filter(\n            (method) => unsupportedMethods.includes(method),\n          )\n          if (unsupportedMethodsInQuery.length > 0) {\n            const unsupportedMethodsStr = unsupportedMethodsInQuery.join(', ')\n            throw new Error(\n              `Referenced query must be static. It can not contain any of the following methods: ${unsupportedMethodsStr}`,\n            )\n          }\n\n          const storage = await this.source.manager.materializeStorage\n          const materializeUrl = await storage.getUrl({\n            sqlHash,\n            sourcePath: refSource.path,\n            queryName: referencedQuery,\n          })\n          return `read_parquet('${materializeUrl}')`\n        },\n        readMetadata: async () => {\n          return emptyMetadata()\n        },\n      },\n    }\n  }\n\n  private async createClient(): Promise<void> {\n    this.client = await Database.create(\n      this.url,\n      this.url === ':memory:' ? OPEN_READWRITE : OPEN_READONLY,\n    )\n  }\n\n  async runQuery(compiledQuery: CompiledQuery): Promise<QueryResult> {\n    try {\n      if (!this.client) await this.createClient()\n      const conn = await this.client!.connect()\n\n      let results = []\n      if (compiledQuery.resolvedParams.length > 0) {\n        const stmt = await conn.prepare(compiledQuery.sql)\n        results = await stmt.all(\n          ...this.buildQueryParams(compiledQuery.resolvedParams),\n        )\n        stmt.finalize()\n      } else {\n        results = await conn.all(compiledQuery.sql)\n      }\n      const rows = results.map((row) => Object.values(row))\n      const rowCount = results.length\n      const firstRow = results[0]\n      const fields = firstRow\n        ? Object.keys(firstRow).map(\n            (key) =>\n              ({\n                name: key,\n                type: DataType.String,\n              }) as Field,\n          )\n        : []\n\n      return new QueryResult({ fields, rows, rowCount })\n    } catch (error) {\n      throw new ConnectorError((error as Error).message)\n    }\n  }\n\n  private buildQueryParams(params: ResolvedParam[]) {\n    return params.map((param) => param.value)\n  }\n}\n"],"names":[],"mappings":";;;;;;AAqBqB,MAAA,eAAgB,SAAQ,aAA+B,CAAA;AAClE,IAAA,MAAM,CAAW;AACjB,IAAA,GAAG,CAAQ;AAEnB,IAAA,WAAA,CAAY,OAA2C,EAAA;QACrD,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,IAAI,CAAC,GAAG,GAAG,OAAO,CAAC,gBAAgB,CAAC,GAAG,IAAI,UAAU,CAAA;KACtD;IAED,GAAG,GAAA;QACD,IAAI,IAAI,CAAC,MAAM;AAAE,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;AAC3C,QAAA,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;KACzB;AAED,IAAA,OAAO,CAAC,KAAc,EAAA;QACpB,OAAO;YACL,KAAK;AACL,YAAA,UAAU,EAAE,GAAG;SAChB,CAAA;KACF;AAES,IAAA,qBAAqB,CAC7B,SAAoC,EAAA;QAEpC,MAAM,gBAAgB,GAAG,KAAK,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAA;AAC/D,QAAA,MAAM,EAAE,OAAO,EAAE,GAAG,SAAS,CAAA;QAE7B,OAAO;AACL,YAAA,GAAG,gBAAgB;AACnB,YAAA,YAAY,EAAE;AACZ,gBAAA,YAAY,EAAE;AACZ,oBAAA,mBAAmB,EAAE,SAAS;AAC9B,oBAAA,mBAAmB,EAAE,KAAK;AAC1B,oBAAA,sBAAsB,EAAE,IAAI;AAC7B,iBAAA;AACD,gBAAA,OAAO,EAAE,OAAO,eAAuB,KAAI;AACzC,oBAAA,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;AACvC,wBAAA,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAA;qBACtC;AACD,oBAAA,MAAM,gBAAgB,GAAG,eAAe,CAAC,UAAU,CAAC,GAAG,CAAC;AACtD,0BAAE,eAAe;AACjB,0BAAE,IAAI,CAAC,IAAI,CACP,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EACvC,eAAe,CAChB,CAAA;AAEL,oBAAA,IACE,OAAO,CAAC,oBAAoB,CAAC,QAAQ,CACnC,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CACtC,EACD;AACA,wBAAA,MAAM,IAAI,KAAK,CACb,8DAA8D,CAC/D,CAAA;qBACF;AAED,oBAAA,MAAM,SAAS,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,aAAa,CACxD,gBAAgB,CACjB,CAAW,CAAA;AACZ,oBAAA,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAChC,MAAM,SAAS,CAAC,oBAAoB,CAAC,gBAAgB,CAAC,CAAA;AACxD,oBAAA,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;AACvB,wBAAA,MAAM,IAAI,KAAK,CACb,CAAA,oIAAA,CAAsI,CACvI,CAAA;qBACF;AAED,oBAAA,MAAM,kBAAkB,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC,CAAA;oBAChD,MAAM,yBAAyB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAC1D,CAAC,MAAM,KAAK,kBAAkB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAChD,CAAA;AACD,oBAAA,IAAI,yBAAyB,CAAC,MAAM,GAAG,CAAC,EAAE;wBACxC,MAAM,qBAAqB,GAAG,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAClE,wBAAA,MAAM,IAAI,KAAK,CACb,qFAAqF,qBAAqB,CAAA,CAAE,CAC7G,CAAA;qBACF;oBAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAA;AAC5D,oBAAA,MAAM,cAAc,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC;wBAC1C,OAAO;wBACP,UAAU,EAAE,SAAS,CAAC,IAAI;AAC1B,wBAAA,SAAS,EAAE,eAAe;AAC3B,qBAAA,CAAC,CAAA;oBACF,OAAO,CAAA,cAAA,EAAiB,cAAc,CAAA,EAAA,CAAI,CAAA;iBAC3C;gBACD,YAAY,EAAE,YAAW;oBACvB,OAAO,aAAa,EAAE,CAAA;iBACvB;AACF,aAAA;SACF,CAAA;KACF;AAEO,IAAA,MAAM,YAAY,GAAA;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM,QAAQ,CAAC,MAAM,CACjC,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,GAAG,KAAK,UAAU,GAAG,cAAc,GAAG,aAAa,CACzD,CAAA;KACF;IAED,MAAM,QAAQ,CAAC,aAA4B,EAAA;AACzC,QAAA,IAAI;YACF,IAAI,CAAC,IAAI,CAAC,MAAM;AAAE,gBAAA,MAAM,IAAI,CAAC,YAAY,EAAE,CAAA;YAC3C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAO,CAAC,OAAO,EAAE,CAAA;YAEzC,IAAI,OAAO,GAAG,EAAE,CAAA;YAChB,IAAI,aAAa,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;AAClD,gBAAA,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CACtB,GAAG,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,cAAc,CAAC,CACvD,CAAA;gBACD,IAAI,CAAC,QAAQ,EAAE,CAAA;aAChB;iBAAM;gBACL,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,CAAA;aAC5C;AACD,YAAA,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;AACrD,YAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAA;AAC/B,YAAA,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;YAC3B,MAAM,MAAM,GAAG,QAAQ;AACrB,kBAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CACvB,CAAC,GAAG,MACD;AACC,oBAAA,IAAI,EAAE,GAAG;oBACT,IAAI,EAAE,QAAQ,CAAC,MAAM;AACtB,iBAAA,CAAU,CACd;kBACD,EAAE,CAAA;YAEN,OAAO,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAA;SACnD;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,MAAM,IAAI,cAAc,CAAE,KAAe,CAAC,OAAO,CAAC,CAAA;SACnD;KACF;AAEO,IAAA,gBAAgB,CAAC,MAAuB,EAAA;AAC9C,QAAA,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAA;KAC1C;AACF;;;;"}