import 'dotenv/config';
import type QueryResult from '@latitude-data/query_result';
import { BaseConnector } from '@/baseConnector';
import { BatchedQueryOptions, CompilationContext } from '@/types';
import { CompiledQuery, QueryConfig, QueryRequest, SourceSchema } from '@/types';
import SourceManager from '@/manager';
import { QueryMetadata } from '@latitude-data/sql-compiler';
export declare function buildDefaultContext(): Omit<CompilationContext, 'request'>;
export declare class Source {
    private _schema;
    private _connector?;
    readonly path: string;
    readonly manager: SourceManager;
    constructor({ path, schema, sourceManager, connector, }: {
        path: string;
        schema: SourceSchema;
        sourceManager: SourceManager;
        connector?: BaseConnector;
    });
    get config(): QueryConfig;
    get type(): SourceSchema['type'];
    get connectionParams(): Record<string, unknown>;
    get connectorPackageName(): string;
    endConnection(): Promise<void>;
    getMetadataFromQuery(queryPath: string): Promise<QueryMetadata>;
    compileQuery({ queryPath, params }: QueryRequest, context?: Omit<CompilationContext, 'request'>): Promise<CompiledQuery>;
    runCompiledQuery(compiledQuery: CompiledQuery): Promise<QueryResult>;
    batchQuery(compiledQuery: CompiledQuery, options: BatchedQueryOptions): Promise<void>;
    private connector;
    private getSql;
}
//# sourceMappingURL=index.d.ts.map