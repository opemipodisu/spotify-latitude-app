import { BaseConnector, ConnectorOptions } from '@/baseConnector';
import { BatchedQueryOptions, CompiledQuery, ResolvedParam } from '@/types';
import QueryResult from '@latitude-data/query_result';
export type ConnectionParams = {
    fail?: string | false;
    onResolve?: (value: unknown, resolvedParam: ResolvedParam) => void;
    onRunQuery?: (compiledQuery: CompiledQuery, result?: QueryResult, error?: Error) => void;
};
/**
 * This is a mock connector that can be used for testing purposes.
 * It does not connect to any database and returns a result based on
 * the input query.
 *
 * Each line in the query will represent a new row in the result, as
 * a 'value' field.
 * Resolved values are shown in the result as `[[value]]`
 *
 * A line can also start with one of the following keywords to define
 * different behaviors:
 * - `FAIL <message>` will throw an error with the given message.
 * - `SLEEP <ms>` will wait for the given number of milliseconds.
 */
export default class TestConnector extends BaseConnector<ConnectionParams> {
    private onResolve?;
    private onRunQuery?;
    constructor(options: ConnectorOptions<ConnectionParams>);
    resolve(value: unknown): ResolvedParam;
    batchQuery(compiledQuery: CompiledQuery, options: BatchedQueryOptions): Promise<void>;
    runQuery(compiledQuery: CompiledQuery): Promise<QueryResult>;
}
//# sourceMappingURL=index.d.ts.map