import 'dotenv/config';
import { Source } from '@/source';
import { StorageDriver } from '@/materialize/drivers/StorageDriver';
import { DriverConfig, StorageKlass, StorageType } from '@/materialize';
export default class SourceManager {
    private instances;
    readonly materializeStorage: StorageDriver;
    readonly queriesDir: string;
    constructor(queriesDir: string, options?: {
        materialize?: {
            Klass: StorageKlass;
            config: DriverConfig<StorageType>;
        };
    });
    /**
     * Finds the source configuration file in the given path and loads it
     * @param path - The path to any file in the source directory. This could be the source configuration file itself or any other query in the directory.
     */
    loadFromQuery(query: string): Promise<Source>;
    /**
     * Loads a source from a source configuration file
     * @param sourceFile - The path to the source configuration file
     */
    loadFromConfigFile(sourceFile: string): Promise<Source>;
    /**
     * Safely closes the connection to a source and removes the instance from the cache
     */
    clear(source: Source): Promise<void>;
    /**
     * Clears all sources and closes all connections
     */
    clearAll(): Promise<void>;
    private buildSource;
}
//# sourceMappingURL=index.d.ts.map