import type { CompileContext, QueryMetadata } from './types';
export declare class Compiler {
    private context;
    private currentConfig;
    constructor({ sql, supportedMethods, resolveFn }: CompileContext);
    /**
     * Resolves every block, expression, and function inside the SQL and returns the final query.
     *
     * Note: Compiling a query may take time in some cases, as some queries may contain expensive
     * functions that need to be resolved at runtime.
     */
    compileSQL(): Promise<string>;
    /**
     * Without compiling the SQL or resolving any expression, quickly reads the config and calls
     * to the supported methods present in the SQL.
     */
    readMetadata(): Promise<QueryMetadata>;
    /**
     * Given a base node, returns the string that will replace it in the final SQL
     */
    private resolveBaseNode;
    private resolveBaseNodeChildren;
    /**
     * Given a base node, returns the list of defined configs and present methods from the supportedMethods.
     */
    private getBaseNodeMetadata;
    private baseNodeError;
    private expressionError;
}
//# sourceMappingURL=index.d.ts.map